{
	# Configure default logging for all components
	log default {
		output stderr
		format console
		level INFO
	}
	log file {
		output file ./caddy.log
		format json
		level INFO
	}
	# This line is required to tell our Web Server that authentication should happen BEFORE forwarding requests to handler
	# I'd like to remove it, but for now it is required
	order authorize_with before handle
	# This disables binding to port 80 (HTTP) automatically and redirecting to port 443 (HTTPS)
	# It does not disable HTTPS, it just disables the automatic redirection, and in this specific
	# case, it disables binding to port 80 because this port is not used anywhere else in config.
	auto_https off
	# This line is required to use a local certificate issuer rather than Let's Encrypt or ZeroSSL
	# Valid values are: letsencrypt, zerossl, internal
	cert_issuer internal
	# This enables Prometheus metrics for HTTP servers
	# I'd like to have this enabled by default, but for now it is required
	servers {
		metrics
	}
	# This declares Azure Key Vault instances (secret stores) where secrets can be fetched
	# Those secrets can be used in our configuration using the syntax {secret.<secret_name>@<store_name>}
	secrets {
		store az-kv-srv-01 azure_keyvault https://kv-srv-01.vault.azure.net
		# Alternatively, it's possible to automate secret fetching using the following syntax
		# This will fetch the secret every hour, and pass it to a "file" handler which will
		# write the secret to a file and execute a command when the secret changes
		# This is useful to automatically update secrets in a systemd environment or a 
		# docker environment for example
		automate {
			source some-secret@az-kv-srv-01
			interval 1h
			template "The value is: {some-secret@az-kv-srv-01}"
			handle file {
				path ./secret.txt
				chmod 0600
				notify exec {
					command touch ./some-other-file
				}
			}
		}
	}
	# Start docker containers alongside the application
	# Networes are always created before starting containers
	docker {
		network mynetwork {
			driver bridge
			ipam {
				subnet 172.200.200.0/24
				gateway 172.200.200.1
			}
		}
		container test {
			image docker.io/library/alpine:latest
			command sleep 3600
			network mynetwork
			restart always
			mount /data/test to /data
			environment {
				ENV1 "value1"
				ENV2 "value2"
			}
			env ENV3 "value3"
			label com.quara-dev.service "test"
			label com.quara-dev.service.version "1.0.0"
			label com.quara-dev.service.env "dev"
		}
		container other {
			image docker.io/library/alpine:latest
			restart on-failure
		}
	}
	# Start python processes alongside the application
	# Each python process may be started in a virtual environment and may have a custom entrypoint
	# Alternatively, it's possible to specify a default virtual environment for all processes.
	python {
        virtualenv /home/charbonnierg/github/quara-dev/beyond/sandbox/.venv
		app demo1 {
			entrypoint /home/charbonnierg/github/quara-dev/beyond/sandbox/app1
            forward_stdout
            forward_stderr
		}
        app demo2  {
			entrypoint /home/charbonnierg/github/quara-dev/beyond/sandbox/app2
            forward_stdout
            forward_stderr
        }
	}
	# This block is required to configure and start NATS server when our Web Server starts
	broker {
		debug
		metrics all
		default_auth_callout deny
		account OAUTH2 {
			jetstream on
			auth_policy {
				match {
					connection_type in_process
					client_name oauth2-az-endpoint
				}
				callout allow
			}
		}
		account APP {
			map_subject "canary.req.>" {
				to "req.>" weight 50
				to "beta.req.>" weight 50
			}
			map_subject "pub.>" to "pub.srv-01.>"
			auth_policy {
				match {
					connection_type nats
					client_host 127.0.0.1
					client_token APP
				}
				callout allow
			}
			auth_policy {
				match {
					connection_type websocket
					client_username APP
				}
				callout oauth2 {
					endpoint az-oidc-endpoint
					template {
						allow_sub "_INBOX.{oidc.session.email}.>"
						allow_sub "{oidc.session.email}.>"
						allow_pub ">"
						allow_resp
					}
				}
			}
		}
		account SYS {
			export_service "$SYS.REQ.SERVER.PING" to MONITORING
			auth_policy {
				match {
					client_token SYS
					client_host 127.0.0.1
				}
				callout allow
			}
		}
		account MONITORING {
			import_service "$SYS.REQ.SERVER.PING" from SYS
			auth_policy {
				match {
					client_token monitoring
					client_host 127.0.0.1
				}
				callout allow
			}
		}
		jetstream {
			unique_tag region
			max_disk 10GB
			max_memory 1GB
		}
		nats_server {
			name srv-01
			tags region:eu-west-3
			host 127.0.0.1
			port 4222
			http_port 8222
			system_account SYS
		}
		websocket_server {
			host 0.0.0.0
			port 10443
			advertise ws.local.quara-dev.com:10443
			tls ws.local.quara-dev.com
		}
		mqtt_server {
			host 0.0.0.0
			port 8883
			tls mqtt.local.quara-dev.com
		}
	}
	# Enable oauth2 authentication/authorization by creating an oauth2 endpoint.
	# An endpoint is configured with various options, including a store where oauth2 sessions are stored
	# and an identity provider (oidc provider) which is used to authenticate users.
	oauth2 {
		az-oidc-endpoint {
			store jetstream {
				name OAUTH2-SESSIONS
				client in_process {
					name oauth2-az-endpoint
				}
			}
			display_debug
			cookie_secure
			cookie_name _oauth2_session
			cookie_http_only no
			cookie_domains .local.quara-dev.com
			email_domains *
			whitelist_domains .local.quara-dev.com
			extra_jwt_issuers https://sts.windows.net/96bdcf75-3f33-4995-966b-d8eddb861f9b/=4a224c79-38e2-487f-96e0-5f4febfa4ce1
			provider oidc {
				id azure-ad
				name "Azure AD"
				client_id "4a224c79-38e2-487f-96e0-5f4febfa4ce1"
				client_secret "{secret.oauth2-client-secret@az-kv-srv-01}"
				scope openid email profile
				login_url https://login.microsoftonline.com/96bdcf75-3f33-4995-966b-d8eddb861f9b/v2.0/oauth2/authorize
				redeem_url https://login.microsoftonline.com/96bdcf75-3f33-4995-966b-d8eddb861f9b/v2.0/oauth2/token
				profile_url https://graph.microsoft.com/v1.0/me
				oidc_issuer_url https://login.microsoftonline.com/96bdcf75-3f33-4995-966b-d8eddb861f9b/v2.0
				oidc_jwks_url https://login.microsoftonline.com/common/discovery/keys
				oidc_audience_claims aud
				oidc_email_claim email
				oidc_user_id_claim email
			}
		}
	}
	# Enable and configure an embedded OpenTelemetry Collector
	# A collector must have at least one receiver and one exporter used together
	# in one pipeline. Processors can be used to modify telemetry data before exporting it.
	telemetry {
		extension zpages
		extension basicauth/client {
			username {secret.quara-grafana-stack-id@az-kv-srv-01}
			password {secret.quara-grafana-stack-token@az-kv-srv-01}
		}
		receiver hostmetrics {
			collection_interval 10s
			initial_delay 5s
			root_path /
			scrap cpu
		}
		receiver prometheus {
			scrape_interval 10s
			scrape_timeout 1s
			# Scrap caddy and otel-collector metrics
			scrape_config caddy-beyond localhost:2019
			scrape_config otel-collector localhost:2020
			# Scrap additional metrics
			# ...
		}
		receiver otlp {
			grpc 127.0.0.1:4317
			http 127.0.0.1:4318
		}
		receiver filelog {
			include "*.log"
			resource {
				environment_name dev
				service_name caddy-beyond
				server_name srv-01
			}
		}
		exporter otlphttp {
			endpoint https://otlp-gateway-prod-eu-west-3.grafana.net/otlp
			authenticator basicauth/client
		}
		processor batch
		processor attributes {
			action insert {
				key server_name
				value srv-01
			}
		}
		service {
			metrics 127.0.0.1:2020
			extensions zpages basicauth/client
			trace_pipeline {
				receivers otlp
				processors batch attributes
				exporters otlphttp
			}
			metric_pipeline {
				receivers otlp prometheus hostmetrics
				processors batch attributes
				exporters otlphttp
			}
			log_pipeline {
				receivers otlp filelog
				processors batch attributes
				exporters otlphttp
			}
		}
	}
}

# Each website is defined by a block like this one
local.quara-dev.com:11443 {
	log
	authorize_with oauth2 az-oidc-endpoint
	respond "hello world"
}

# This is another website
admin.local.quara-dev.com:11443 {
	log
	authorize_with oauth2 az-oidc-endpoint
	root * ./www/index.html
	file_server
}

# Yet another website, which serves web server and NATS metrics
metrics.local.quara-dev.com:11443 {
	log
	authorize_with oauth2 az-oidc-endpoint
	metrics
}
